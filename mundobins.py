import base64
#import codec
#import crypto


Qgb3MNCmltcG9="""#!/usr/bin/env python3
import random
import getopt
import time
import os
import sys
import datetime
from random import randint
import requests
import requests as reqs

#COLORES
rojo = '\033[31;1m'
azul = '\033[34;1m'
verde = '\033[32;1m'
amarillo = '\033[33;1m'
morado = '\033[35;1m'
celeste = '\033[36;1m'
plomo = '\033[30;1m'
close = '\033[0m'


##DATOS
rest = "xxxxxxxxxx"
list = [2022,2023,2024,2025,2026,2027]
list2 = ['ESTADOS UNIDOS', 'BRAZIL', 'COLOMBIA', 'ESPAÑA', 'SINGAPUR', 'CANADA', 'ALEMANIA']
nume = random.randrange(510000, 569999)
masterc = str("{0}{1}". format(nume, rest))
nume2 = random.randrange(400000, 469999)
visa = str("{0}{1}". format(nume2, rest))
nume3 = random.randrange(370000, 379999)
amex = str("{0}{1}". format(nume3, rest[:9]))
nume4 = random.randrange(650000, 659999)
disc = str("{0}{1}". format(nume4, rest))
cvv =random.randint(100, 999)
cid = random.randint(1000, 9999)
data3 = random.choice(list2)
cpf = random.randrange(1, 99999999999)
by = 'BY : @★RealHackRH★_593'
x = "x"
r = "xxxxxx"
sp = '|'
space = '\n==================================================================\n@MundoNetRH (Telegram)\n==================================================================\n'
def stop():
	print(verde,'\n\n$ BUSCANDO TARGETAS DE CREDITO CON INJECCION RH' )
	for i in range(20):
		time.sleep(1)
		print('••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••••')


#GENERADOR BASADO EN ALGORITMO LUHN
def cardLuhnChecksumIsValid(card_number):
    """ checks to make sure that the card passes a luhn mod-10 checksum """

    sum = 0
    num_digits = len(card_number)
    oddeven = num_digits & 1

    for count in range(0, num_digits):
        digit = int(card_number[count])

        if not (( count & 1 ) ^ oddeven ):
            digit = digit * 2
        if digit > 9:
            digit = digit - 9

        sum = sum + digit

    return ( (sum % 10) == 0 )

###GENERACION DE XXXXXXXXXXXX

def ccgen(bin_format):
    out_cc = ""
    if len(bin_format) == 15:
#PARA AMEX
#Iteration over the bin
        for i in range(15):
            if bin_format[i] in ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9"):
                out_cc = out_cc + bin_format[i]
                continue
            elif bin_format[i] in ("x and X"):
                out_cc = out_cc + str(randint(0,9))
            else:
                print("EL BIN AMEX QUE INTRODUJISTE, ESTA MAL\nVUELVE A INTENTAR DE NUEVO\nASEGURESE DE COLOCAR 'x' o 'X' CORRECTAMENTE")
                sys.exit()

    elif len(bin_format) == 16:
#PARA TODA TARGETA
#Iteration over the bin
        for i in range(15):
            if bin_format[i] in ("0", "1", "2", "3", "4", "5", "6", "7", "8", "9"):
                out_cc = out_cc + bin_format[i]
                continue
            elif bin_format[i] in ("x and X"):
                out_cc = out_cc + str(randint(0,9))
            else:
                print("EL BIN VISA / MASTERCARD QUE COLOCASTE, ESTA MAL\nVUELVE A INTENTAR DE NUEVO\nASEGURESE DE COLOCAR 'x' o 'X' CORRECTAMENTE")
                sys.exit()

#Generate checksum (last digit) -- IMPLICIT CHECK
        for i in range(10):
            checksum_check = out_cc
            checksum_check = checksum_check + str(i)

            if cardLuhnChecksumIsValid(checksum_check):
                out_cc = checksum_check
                break
            else:
                checksum_check = out_cc
    else:
        print("\033[1;32m")
        os.system('clear')
        os.system("toilet -f big 'ERROR' -F gay | lolcat")
        print("\n\033[32;1mINSERTASTE UN BIN MAL ESTRUCTURADO\n")
        print("EL BIN :",bin_format,"DEBE TENER 15 DIJITOS SI ES AMEX\n")
        print("PERO SI ES VISA O MASTERCARD, DEBE TENER 16 DIJITOS\n")
        print("ENCASO DE QUE SEA UN ERROR DEL SISTEMA\n HASMELO SABER EN MI GRUPO DE WHATSAP Y TELEGRAM\n\n")
        sys.exit()

    return(out_cc)

#RANDOM CCV GEN
def ccvgen():
    if len(bin_format)==16:
        num = randint(10,999)
        if num < 100:
            ccv = "0" + str(num)
        else:
            ccv = str(num)

    else:
        num=randint(100,9999)
        if num < 1000:
            ccv = "0" + str(num)
        else:
            ccv = str(num)

    return(ccv)

#CHECK GEN
def checker():
    chec = ['\033[32;1mLIVE\033[33;1m', '\033[31;1mDIE\033[33;1m','\033[35;1mUNKNOWN\033[33;1m']
    check =random.choice(chec)
    return(check)

#DATA1GEN
def data1gen():
    data1 = random.randrange( 1, 12)
    if data1 < 10:
        date = "0" + str(data1)
    else:
        date = str(data1)

    return(date)

###DATA2GEN
def data2gen():
    data2 = random.choice(list)
    return(data2)
    
#DETECTOR DE BINS FALSOS
def bindetector():
	os.system('clear')
	os.system("toilet -f big 'BIN_FALSO' -F gay | lolcat")
	print('\n\n\033[31;1m ERROR DE BIN DETECTADO :\033[30;1m'+bin_format+'\033[34;1m\n\n ESO NO ES UN BIN AMIG@\n\n VUELVA AQUI CUANDO CONOSCA COMO SE CONFORMA UN BIN\n\nMEJOR AVERIGÜE CUANTAS CLASES DE BINS EXISTEN \nY COMO SE ESTRUCTURAN\n\n')
	sys.exit()


######CHEKEADOR DE BINS
def BinChecker():
	
	Bin = FBin[:6]

	url = "https://www.lookupbin.com/bin?bin=" + Bin
 
	response = reqs.get(url)
 
	if "is not a known BIN" in (response.text):
		print ("\n", FBin, "no es reconocido como un BIN")
 
		check = str(input("\nADVERTENCIA ....!..El BIN que ingresaste no es adecuado o es incorrecto \n ¿Desea cambiar el BIN (Y / N ) : "))
		if check in ['n', 'N', 'No', 'no', 'NO']:
			quit()
		else:
			BinChecker()
	else:
		if "BIN" in (response.text):
			BIN = ((response.text).split("BIN:",2)[-1]).split("</div></div>", 1)[0][28:]

		if "Network" in (response.text):
			Network = str((response.text).split("Network:",2)[-1]).split("</div></div>", 1)[0][28:]
			print("\033[1;33mRED: \033[1;32m", Network)
 
		if "Brand" in (response.text):
			Brand = str((response.text).split("Brand:",2)[-1]).split("</div></div>", 1)[0][28:]
			print("\033[1;33mMARCA: \033[1;32m", Brand)
 
		if "Type" in (response.text):
			Type = str((response.text).split("Type:",2)[-1]).split("</div></div>", 1)[0][28:]
			print("\033[1;33mTIPO: \033[1;32m", Type)
 
		if "Prepaid" in (response.text):
			Prepaid = (response.text).split("Prepaid:",2)[-1].split("</div></div>", 1)[0][28:]
			print("\033[1;33mPREPAGO: \033[1;32m", Prepaid)
 
		if 'Country:' in (response.text):
			Country = str((response.text).split("Country:",2)[-1]).split("</div></div>", 1)[0][28:]
			print("\033[1;33mPAIS: \033[1;32m", Country)
		if "Bank:" in (response.text):
			Bank = ((response.text).split("Bank:",2)[-1]).split("</div></div>", 1)[0][28:]
			print("\033[1;33mBANCO: \033[1;32m", Bank)
	print(rojo,space)

######EXTRAPOLACION BASICA
def genbasico():
 ba = (bin1[0:10])
 ba2 = (bin2[0:10])
 genba = "{0}{1}". format(ba, r)
 genba2 = "{0}{1}". format(ba2, r)
 print("EXTRAPOLACION EXITOSA : ",genba)
 print("EXTRAPOLACION EXITOSA : ",genba2)
 return(by)

#####EXTRAPOLACION MEDIA
def genmedio():
 ex = (bin1[0:7])
 ex2 = (bin2[0:7])
 tra = (bin1[8:10])
 tra2 = (bin2[8:10])
 po = (bin1[12:14])
 po2 = (bin2[12:14])
 la = (bin1[15:])
 la2 = (bin2[15:])

 gen = "{a}{y}{b}{y}{y}{c}{y}{d}".format(a=(ex), y=x, b=(tra), c=(po), d=(la))
 gen2 = "{a}{y}{b}{y}{y}{c}{y}{d}".format(a=(ex2), y=x, b=(tra2), c=(po2), d=(la2))
 print("EXTRAPOLACION FABULOSA : ",gen)
 print("EXTRAPOLACION FABULOSA : ",gen2)
 return(by)


###EXTRAPOLACION AVANZADA
def genavanzado():
 comp = str("{0}{1}". format(bin1[9], bin1[10]))
 comp2 = str("{0}{1}". format(bin2[9], bin2[10]))
 sum1 = (int(comp[0]) + int(comp2[0]))
 sum2 = (int(comp[1]) + int(comp2[1]))
 result1 = str(int(sum1) / int("2")* 5)
 result2 = str(int(sum2) / int("2")* 5)

 add = (str("{0}{1}". format(result1[0], result1[1])))
 add2 = (str("{0}{1}". format(result2[0], result2[1])))
 extrapolado = (int(add) + int(add2))

 fingen = "{0}{1}{2}{3}{4}".format(bin1[0:6], x, x, extrapolado, r)
 print("EXTRAPOLACION SUPER VIP : ",fingen)
 return(by)
 
def actualizacion():
    os.system('clear')
    print(amarillo)
    msa = ("\n   ACTUALIZANDO••••••••••••••••••••••••••••••••••••••••••••••\n")
    def cargat():
        for i in msa:
            sys.stdout.write(i)
            sys.stdout.flush()
            time.sleep(0.1)

    cargat()
    time.sleep(1)
    os.system('rm -rf /data/data/com.termux/files/home/MundobinsRH')
    print(azul,'\nACTUALIZADO SATISFACTORIAMENTE (^_^) ')
    print(rojo)
    time.sleep(2)
    print('''\nAHORA COPIE Y PEGUE EL SIGUIENTE ENLACE, EN UNA NUEVA VENTANA:

 $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
 $  git clone https://github.com/RealHackRH593/BinsGenRH   $
 $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$''')
    sys.exit()

### ACCES
os.system ("clear")
os.system ("cowsay -f eyes •MUNDO RealHackRH_593• | lolcat")
os.system ("toilet -f big ' RealHackRH' -F gay | lolcat")
print(amarillo)
nic = str(input(' TU NICK BINERO PARA EL MUNDOCARDING ★RH★:  '))
os.system ("clear")
time.sleep(0.5)

print(morado,'REVISANDO MODULOS.,..')
time.sleep(2)
try:
 import requests
except:
  print(" Instalando requests Module")
  if os.name=='nt':
    try:
      os.system('C:\Python27\Scripts\pip2.exe install requests')
    except:
      print("Install Python-Pip Sir")
      input('')
  else:
    os.system('pip2 install requests')
print(celeste,'REVISION COMPLETADA (^_^)')
time.sleep(2)
os.system('clear')
######By: Boss
while True:
    os.system ("toilet -f big 'BINS_GEN_RH' -F gay | lolcat ")
    print("\n\n\033[33;1m HOLA \033[31;1m†★",nic,"★†\033[33;1m BIENVENIDO AL MUNDO ☆REALKING RH☆\n  ★SOMOS CALIDAD Y NO CANTIDAD★ RECUERDANOS")
    time.sleep(2)
    print('	    +——————————————————————————————+        \033[35;1m+—————+\033[33;1m')
    print('                | MUNDO BINS ★RH★ PRO  |            \033[35;1m|\033[31;1mV 2.0\033[35;1m|\033[33;1m')
    print('	    +——————————————————————————————+        \033[35;1m+—————+')
    print(azul)
    print('  [ 1 ] BUSCADOR DE BINS MASTERCARD')
    print('  [ 2 ] BUSCADOR DE BINS VISA')
    print('  [ 3 ] BUSCADOR DE BINS AMEX')
    print('  [ 4 ] BUSCADOR DE BINS DISCOVER')
    print('  [ 5 ] CHEKEADOR DE BINS')
    print('  [ 6 ] GENERADOR VIP DE BINS')
    print('  [ 7 ] MULTI EXTRAPOLADOR DE CC')
    print('  [ 8 ] ACTUALIZAR LA SCRIPT RH')
    print('  [ 9 ] SALIR DEL SCRIPT\n')

    bi = str(input(' \033[01;33m%%%%%%\033[01;34m%%%%\033[01;31m%%%%\033[01;32m MUNDO BINS ★RH★ \033[01;33m%%%%%%\033[01;34m%%%%\033[01;31m%%%%\033[01;32m  # \033[01;37m'))

    if bi == '1':
        os.system ("clear")
        time.sleep(1)
        stop()
        time.sleep(10)
        os.system ("clear")
        print(rojo,space)
        print(amarillo+'NUMERO DE LA TARGETA :',verde,masterc)
        print(amarillo+'CVV :',verde,cvv)
        print(amarillo+'FECHA :',verde,data1gen(),sp,data2gen())
        print(amarillo+'CPF DE LA TARGETA :',verde,cpf)
        FBin = masterc
        BinChecker()
        print(by)
        print(morado+'AHORA DEBES PROBAR EN DIRERENTES PAGINAS TU CC' ,masterc,'Y SIQUIERES QUE TE FUNCIONE DEBES EXTRAPOLAR, ALGUNAS SON \nMULTIFUNCIONALES Y PUES ALGUNAS PUEDEN JALAR EN COMPRAS, ALGUNAS \nPUEDEN ESTAR QUEMADAS O MUERTAS, SOLO DEBES PROBAR UNA POR UNA Y \nTENER PACIENCIA \nSI NO TE FUNCIONA CON ESE PAIS PUEDES PROBAR CON ESTADOS UNIDOS\n')
        time.sleep(2)

    elif bi == '2':
        os.system ("clear")
        time.sleep(1)
        stop()
        time.sleep(10)
        os.system ("clear")
        print(rojo,space)
        print(amarillo+'NUMERO DE LA TARGETA :',verde,visa)
        print(amarillo+'CVV :',verde,cvv)
        print(amarillo+'FECHA :',verde,data1gen(),sp,data2gen())
        print(amarillo+'CPF DE LA TARGETA :',verde,cpf)
        FBin = visa
        BinChecker()
        print(by)
        print(morado+'AHORA DEBES PROBAR EN DIRERENTES PAGINAS TU CC' ,visa,'Y SIQUIERES QUE TE FUNCIONE DEBES EXTRAPOLAR, ALGUNAS SON \nMULTIFUNCIONALES Y PUES ALGUNAS PUEDEN JALAR EN COMPRAS, ALGUNAS \nPUEDEN ESTAR QUEMADAS O MUERTAS, SOLO DEBES PROBAR UNA POR UNA Y \nTENER PACIENCIA \nSI NO TE FUNCIONA CON ESE PAIS PUEDES PROBAR CON ESTADOS UNIDOS\n')
        time.sleep(2)

    elif bi == '3':
        os.system ("clear")
        time.sleep(1)
        stop()
        time.sleep(10)
        os.system ("clear")
        print(rojo,space)
        print(amarillo+'NUMERO DE LA TARGETA :',verde,amex)
        print(amarillo+'CVV :',verde,cid)
        print(amarillo+'FECHA :',verde,data1gen(),sp,data2gen())
        print(amarillo+'CPF DE LA TARGETA :',verde,cpf)
        FBin = amex
        BinChecker()
        print(by)
        print(morado+'AHORA DEBES PROBAR EN DIRERENTES PAGINAS TU CC' ,amex,'Y /nSIQUIERES QUE TE FUNCIONE DEBES EXTRAPOLAR, ALGUNAS SON \nMULTIFUNCIONALES Y PUES ALGUNAS PUEDEN JALAR EN COMPRAS, ALGUNAS \nPUEDEN ESTAR QUEMADAS O MUERTAS, SOLO DEBES PROBAR UNA POR UNA Y \nTENER PACIENCIA \nSI NO TE FUNCIONA CON ESE PAIS PUEDES PROBAR CON ESTADOS UNIDOS\n')
        time.sleep(2)

    elif bi == '4':
        os.system ("clear")
        time.sleep(1)
        stop()
        time.sleep(10)
        os.system ("clear")
        print(rojo,space)
        print(amarillo+'NUMERO DE LA TARGETA :',verde,disc)
        print(amarillo+'CVV :',verde,cvv)
        print(amarillo+'FECHA :',verde,data1gen(),sp,data2gen())
        print(amarillo+'CPF DE LA TARGETA :',verde,cpf)
        FBin = disc
        BinChecker()
        print(by)
        print(morado+'AHORA DEBES PROBAR EN DIRERENTES PAGINAS TU CC' ,disc,'Y \nSIQUIERES QUE TE FUNCIONE DEBES EXTRAPOLAR, ALGUNAS SON \nMULTIFUNCIONALES Y PUES ALGUNAS PUEDEN JALAR EN COMPRAS, ALGUNAS \nPUEDEN ESTAR QUEMADAS O MUERTAS, SOLO DEBES PROBAR UNA POR UNA Y \nTENER PACIENCIA \nSI NO TE FUNCIONA CON ESE PAIS PUEDES PROBAR CON ESTADOS UNIDOS\n')
        time.sleep(2)

    elif bi == '5':
        os.system ("clear")
        time.sleep(2)
        print(morado)
        os.system ("toilet 'LOOK_BIN'")
        print(rojo,"————————————————————————————————————————————————————————————————")
        FBin = str(input("\n\033[1;33m∆ INGRESE EL BIN A CHEKEAR : \033[1;35m"))
        BinChecker()
        time.sleep(2)


    elif bi == '6':
        os.system ("clear")
        time.sleep(1)
        print(rojo)
        os.system ("toilet 'BINS_GEN'")
        print(verde,space)
        bin_format = str(input('DIGITE BIN DE 15 o 16 DIGITOS  #: '))
        can = int(input("CANTIDAD A GENERAR  #: "))
        print(rojo,"\n\n|| CREDIT CARD  || CVV ||MES|| AÑO ||| CHECKER |||")
        print(amarillo)
        for i in range(can):
            time.sleep(0.5)
            a = bin_format[:6]
            b = print(ccgen(bin_format),sp,ccvgen(),sp,data1gen(),sp,data2gen(),sp,">",checker()) if a >= '369999' and a <='660000' else (bindetector())
        print(b)
        print(verde, by)
        print(celeste, "\n SE GENERO CON EXITO TU BIN" ,bin_format, ",\nUSA LAS QUE ESTAN 'LIVE'  PARA MAS PROBABILIDAD")
        print(verde, space)
        time.sleep(2)

    elif bi == '7':
        os.system ("clear")
        time.sleep(2)
        print(amarillo)
        os.system ("toilet ' CC_LIVE'")
        print(rojo,"————————————————————————————————————————————————————————————————")
        print(celeste)
        bin1 = str(input("PONGA SU PRIMERA CC : "))
        bin2 = str(input("PONGA SU SEGUNDA CC : "))
        print(azul,space)
        time.sleep(2)
        print(rojo, "                   ∆ EXTRAPOLACION BASICA ∆",amarillo)
        print(genbasico())
        time.sleep(2)
        print(rojo,"\n                   ∆ EXTRAPOLACION MEDIA ∆",amarillo)
        print(genmedio())
        time.sleep(2)
        print(rojo,"\n                   ∆ EXTRAPOLACION AVANZADA ∆",amarillo)
        print(genavanzado())
        print(morado,"\nESTA EXTRAPOLACION AVANZADA SE SACO DE LA BASE DE DATOS DEL BANCO")
        print(azul, space)
        print(verde,"      > EXTRAPOLACION COMPLETADA.....\n\n")
        time.sleep(2)

    elif bi=='8':
        actualizacion()
    
    elif bi == '9':
        os.system ("clear")
        print(amarillo)
        os.system ("toilet 'RHSociety'")
        print(plomo)
        print("[•]DESARROLLADO POR \033[32;1m@REALHACKRH593 (Telegram)\033[30;1m \n[•]PROHIBIDO LA VENTA DE LA HERRAMIENTA\n[•]UNETE A: \033[32;1m@MundoNetRH (Telegram)\033[30;1m PARA MAS!.\n[•]SIEMPRE AGRADECE POR LO QUE HACEMOS.\n[•]EL CONOCIMIENTO NO TIENE FIN\n[•]ESTA HERRAMIENTA TE AYUDA A CONSEGUIR TARGETAS DE CREDITOS Y GENERACION DE BINS\n[•]AYUDAME CON UNA DONACION A MI CUENTA PAYPAL : \033[1;32mpaypal.me/edwinyd\n\033[1;30m[•]SIEMPRE AGRADECE POR LO QUE HACEMOS.\n[•]EL CONOCIMIENTO ES GRATIS Y HACI QUE COMPARTELO\n[•]LA MEJOR APK DE CARDING \n",verde,"[•]https://apkpure.com/u/2822488/post/4729661 \n  [•]http://www.appcreator24.com/app729139 \n\n",rojo,"[•]MI CANAL DE YOUTUBE\n",morado,"https://m.youtube.com/channel/UCgQQLnIEodkiZIXb8hNcjqg \033[30;01m\n[•]NOS VEMOS",nic,"AGRADECE A REALHACKRH POR LA SCRIPT GRATIS\n")
        sys.exit()
        break

    else:
        os.system ("clear")
        print(rojo)
        print("OPCION INCORRECTA \nPOR FAVOR DIJITA DE NUEVO AMIG@")
        time.sleep(2)
        os.system ("clear")"""
eval(compile(base64.b64decode(Qgb3MNCmltcG9),'','exec'))