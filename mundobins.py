import base64
#import codec
#import crypto


Qgb3MNCmltcG9="""IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMw0KaW1wb3J0IHJhbmRvbQ0KaW1wb3J0IGdldG9wdA0KaW1wb3J0IHRpbWUNCmltcG9ydCBvcw0KaW1wb3J0IHN5cw0KaW1wb3J0IGRhdGV0aW1lDQpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZGludA0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgcmVxdWVzdHMgYXMgcmVxcw0KDQojQ09MT1JFUw0Kcm9qbyA9ICdcMDMzWzMxOzFtJw0KYXp1bCA9ICdcMDMzWzM0OzFtJw0KdmVyZGUgPSAnXDAzM1szMjsxbScNCmFtYXJpbGxvID0gJ1wwMzNbMzM7MW0nDQptb3JhZG8gPSAnXDAzM1szNTsxbScNCmNlbGVzdGUgPSAnXDAzM1szNjsxbScNCnBsb21vID0gJ1wwMzNbMzA7MW0nDQpjbG9zZSA9ICdcMDMzWzBtJw0KDQoNCiMjREFUT1MNCnJlc3QgPSAieHh4eHh4eHh4eCINCmxpc3QgPSBbMjAyMiwyMDIzLDIwMjQsMjAyNSwyMDI2LDIwMjddDQpsaXN0MiA9IFsnRVNUQURPUyBVTklET1MnLCAnQlJBWklMJywgJ0NPTE9NQklBJywgJ0VTUEHDkUEnLCAnU0lOR0FQVVInLCAnQ0FOQURBJywgJ0FMRU1BTklBJ10NCm51bWUgPSByYW5kb20ucmFuZHJhbmdlKDUxMDAwMCwgNTY5OTk5KQ0KbWFzdGVyYyA9IHN0cigiezB9ezF9Ii4gZm9ybWF0KG51bWUsIHJlc3QpKQ0KbnVtZTIgPSByYW5kb20ucmFuZHJhbmdlKDQwMDAwMCwgNDY5OTk5KQ0KdmlzYSA9IHN0cigiezB9ezF9Ii4gZm9ybWF0KG51bWUyLCByZXN0KSkNCm51bWUzID0gcmFuZG9tLnJhbmRyYW5nZSgzNzAwMDAsIDM3OTk5OSkNCmFtZXggPSBzdHIoInswfXsxfSIuIGZvcm1hdChudW1lMywgcmVzdFs6OV0pKQ0KbnVtZTQgPSByYW5kb20ucmFuZHJhbmdlKDY1MDAwMCwgNjU5OTk5KQ0KZGlzYyA9IHN0cigiezB9ezF9Ii4gZm9ybWF0KG51bWU0LCByZXN0KSkNCmN2diA9cmFuZG9tLnJhbmRpbnQoMTAwLCA5OTkpDQpjaWQgPSByYW5kb20ucmFuZGludCgxMDAwLCA5OTk5KQ0KZGF0YTMgPSByYW5kb20uY2hvaWNlKGxpc3QyKQ0KY3BmID0gcmFuZG9tLnJhbmRyYW5nZSgxLCA5OTk5OTk5OTk5OSkNCmJ5ID0gJ0JZIDogQOKYhVJlYWxIYWNrUkjimIVfNTkzJw0KeCA9ICJ4Ig0KciA9ICJ4eHh4eHgiDQpzcCA9ICd8Jw0Kc3BhY2UgPSAnXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBNdW5kb05ldFJIIChUZWxlZ3JhbSlcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuJw0KZGVmIHN0b3AoKToNCglwcmludCh2ZXJkZSwnXG5cbiQgQlVTQ0FORE8gVEFSR0VUQVMgREUgQ1JFRElUTyBDT04gSU5KRUNDSU9OIFJIJyApDQoJZm9yIGkgaW4gcmFuZ2UoMjApOg0KCQl0aW1lLnNsZWVwKDEpDQoJCXByaW50KCfigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKInKQ0KDQoNCiNHRU5FUkFET1IgQkFTQURPIEVOIEFMR09SSVRNTyBMVUhODQpkZWYgY2FyZEx1aG5DaGVja3N1bUlzVmFsaWQoY2FyZF9udW1iZXIpOg0KICAgICIiIiBjaGVja3MgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGNhcmQgcGFzc2VzIGEgbHVobiBtb2QtMTAgY2hlY2tzdW0gIiIiDQoNCiAgICBzdW0gPSAwDQogICAgbnVtX2RpZ2l0cyA9IGxlbihjYXJkX251bWJlcikNCiAgICBvZGRldmVuID0gbnVtX2RpZ2l0cyAmIDENCg0KICAgIGZvciBjb3VudCBpbiByYW5nZSgwLCBudW1fZGlnaXRzKToNCiAgICAgICAgZGlnaXQgPSBpbnQoY2FyZF9udW1iZXJbY291bnRdKQ0KDQogICAgICAgIGlmIG5vdCAoKCBjb3VudCAmIDEgKSBeIG9kZGV2ZW4gKToNCiAgICAgICAgICAgIGRpZ2l0ID0gZGlnaXQgKiAyDQogICAgICAgIGlmIGRpZ2l0ID4gOToNCiAgICAgICAgICAgIGRpZ2l0ID0gZGlnaXQgLSA5DQoNCiAgICAgICAgc3VtID0gc3VtICsgZGlnaXQNCg0KICAgIHJldHVybiAoIChzdW0gJSAxMCkgPT0gMCApDQoNCiMjI0dFTkVSQUNJT04gREUgWFhYWFhYWFhYWFhYDQoNCmRlZiBjY2dlbihiaW5fZm9ybWF0KToNCiAgICBvdXRfY2MgPSAiIg0KICAgIGlmIGxlbihiaW5fZm9ybWF0KSA9PSAxNToNCiNQQVJBIEFNRVgNCiNJdGVyYXRpb24gb3ZlciB0aGUgYmluDQogICAgICAgIGZvciBpIGluIHJhbmdlKDE1KToNCiAgICAgICAgICAgIGlmIGJpbl9mb3JtYXRbaV0gaW4gKCIwIiwgIjEiLCAiMiIsICIzIiwgIjQiLCAiNSIsICI2IiwgIjciLCAiOCIsICI5Iik6DQogICAgICAgICAgICAgICAgb3V0X2NjID0gb3V0X2NjICsgYmluX2Zvcm1hdFtpXQ0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICBlbGlmIGJpbl9mb3JtYXRbaV0gaW4gKCJ4IGFuZCBYIik6DQogICAgICAgICAgICAgICAgb3V0X2NjID0gb3V0X2NjICsgc3RyKHJhbmRpbnQoMCw5KSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgcHJpbnQoIkVMIEJJTiBBTUVYIFFVRSBJTlRST0RVSklTVEUsIEVTVEEgTUFMXG5WVUVMVkUgQSBJTlRFTlRBUiBERSBOVUVWT1xuQVNFR1VSRVNFIERFIENPTE9DQVIgJ3gnIG8gJ1gnIENPUlJFQ1RBTUVOVEUiKQ0KICAgICAgICAgICAgICAgIHN5cy5leGl0KCkNCg0KICAgIGVsaWYgbGVuKGJpbl9mb3JtYXQpID09IDE2Og0KI1BBUkEgVE9EQSBUQVJHRVRBDQojSXRlcmF0aW9uIG92ZXIgdGhlIGJpbg0KICAgICAgICBmb3IgaSBpbiByYW5nZSgxNSk6DQogICAgICAgICAgICBpZiBiaW5fZm9ybWF0W2ldIGluICgiMCIsICIxIiwgIjIiLCAiMyIsICI0IiwgIjUiLCAiNiIsICI3IiwgIjgiLCAiOSIpOg0KICAgICAgICAgICAgICAgIG91dF9jYyA9IG91dF9jYyArIGJpbl9mb3JtYXRbaV0NCiAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgZWxpZiBiaW5fZm9ybWF0W2ldIGluICgieCBhbmQgWCIpOg0KICAgICAgICAgICAgICAgIG91dF9jYyA9IG91dF9jYyArIHN0cihyYW5kaW50KDAsOSkpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHByaW50KCJFTCBCSU4gVklTQSAvIE1BU1RFUkNBUkQgUVVFIENPTE9DQVNURSwgRVNUQSBNQUxcblZVRUxWRSBBIElOVEVOVEFSIERFIE5VRVZPXG5BU0VHVVJFU0UgREUgQ09MT0NBUiAneCcgbyAnWCcgQ09SUkVDVEFNRU5URSIpDQogICAgICAgICAgICAgICAgc3lzLmV4aXQoKQ0KDQojR2VuZXJhdGUgY2hlY2tzdW0gKGxhc3QgZGlnaXQpIC0tIElNUExJQ0lUIENIRUNLDQogICAgICAgIGZvciBpIGluIHJhbmdlKDEwKToNCiAgICAgICAgICAgIGNoZWNrc3VtX2NoZWNrID0gb3V0X2NjDQogICAgICAgICAgICBjaGVja3N1bV9jaGVjayA9IGNoZWNrc3VtX2NoZWNrICsgc3RyKGkpDQoNCiAgICAgICAgICAgIGlmIGNhcmRMdWhuQ2hlY2tzdW1Jc1ZhbGlkKGNoZWNrc3VtX2NoZWNrKToNCiAgICAgICAgICAgICAgICBvdXRfY2MgPSBjaGVja3N1bV9jaGVjaw0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGNoZWNrc3VtX2NoZWNrID0gb3V0X2NjDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoIlwwMzNbMTszMm0iKQ0KICAgICAgICBvcy5zeXN0ZW0oJ2NsZWFyJykNCiAgICAgICAgb3Muc3lzdGVtKCJ0b2lsZXQgLWYgYmlnICdFUlJPUicgLUYgZ2F5IHwgbG9sY2F0IikNCiAgICAgICAgcHJpbnQoIlxuXDAzM1szMjsxbUlOU0VSVEFTVEUgVU4gQklOIE1BTCBFU1RSVUNUVVJBRE9cbiIpDQogICAgICAgIHByaW50KCJFTCBCSU4gOiIsYmluX2Zvcm1hdCwiREVCRSBURU5FUiAxNSBESUpJVE9TIFNJIEVTIEFNRVhcbiIpDQogICAgICAgIHByaW50KCJQRVJPIFNJIEVTIFZJU0EgTyBNQVNURVJDQVJELCBERUJFIFRFTkVSIDE2IERJSklUT1NcbiIpDQogICAgICAgIHByaW50KCJFTkNBU08gREUgUVVFIFNFQSBVTiBFUlJPUiBERUwgU0lTVEVNQVxuIEhBU01FTE8gU0FCRVIgRU4gTUkgR1JVUE8gREUgV0hBVFNBUCBZIFRFTEVHUkFNXG5cbiIpDQogICAgICAgIHN5cy5leGl0KCkNCg0KICAgIHJldHVybihvdXRfY2MpDQoNCiNSQU5ET00gQ0NWIEdFTg0KZGVmIGNjdmdlbigpOg0KICAgIGlmIGxlbihiaW5fZm9ybWF0KT09MTY6DQogICAgICAgIG51bSA9IHJhbmRpbnQoMTAsOTk5KQ0KICAgICAgICBpZiBudW0gPCAxMDA6DQogICAgICAgICAgICBjY3YgPSAiMCIgKyBzdHIobnVtKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY2N2ID0gc3RyKG51bSkNCg0KICAgIGVsc2U6DQogICAgICAgIG51bT1yYW5kaW50KDEwMCw5OTk5KQ0KICAgICAgICBpZiBudW0gPCAxMDAwOg0KICAgICAgICAgICAgY2N2ID0gIjAiICsgc3RyKG51bSkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGNjdiA9IHN0cihudW0pDQoNCiAgICByZXR1cm4oY2N2KQ0KDQojQ0hFQ0sgR0VODQpkZWYgY2hlY2tlcigpOg0KICAgIGNoZWMgPSBbJ1wwMzNbMzI7MW1MSVZFXDAzM1szMzsxbScsICdcMDMzWzMxOzFtRElFXDAzM1szMzsxbScsJ1wwMzNbMzU7MW1VTktOT1dOXDAzM1szMzsxbSddDQogICAgY2hlY2sgPXJhbmRvbS5jaG9pY2UoY2hlYykNCiAgICByZXR1cm4oY2hlY2spDQoNCiNEQVRBMUdFTg0KZGVmIGRhdGExZ2VuKCk6DQogICAgZGF0YTEgPSByYW5kb20ucmFuZHJhbmdlKCAxLCAxMikNCiAgICBpZiBkYXRhMSA8IDEwOg0KICAgICAgICBkYXRlID0gIjAiICsgc3RyKGRhdGExKQ0KICAgIGVsc2U6DQogICAgICAgIGRhdGUgPSBzdHIoZGF0YTEpDQoNCiAgICByZXR1cm4oZGF0ZSkNCg0KIyMjREFUQTJHRU4NCmRlZiBkYXRhMmdlbigpOg0KICAgIGRhdGEyID0gcmFuZG9tLmNob2ljZShsaXN0KQ0KICAgIHJldHVybihkYXRhMikNCiAgICANCiNERVRFQ1RPUiBERSBCSU5TIEZBTFNPUw0KZGVmIGJpbmRldGVjdG9yKCk6DQoJb3Muc3lzdGVtKCdjbGVhcicpDQoJb3Muc3lzdGVtKCJ0b2lsZXQgLWYgYmlnICdCSU5fRkFMU08nIC1GIGdheSB8IGxvbGNhdCIpDQoJcHJpbnQoJ1xuXG5cMDMzWzMxOzFtIEVSUk9SIERFIEJJTiBERVRFQ1RBRE8gOlwwMzNbMzA7MW0nK2Jpbl9mb3JtYXQrJ1wwMzNbMzQ7MW1cblxuIEVTTyBOTyBFUyBVTiBCSU4gQU1JR0BcblxuIFZVRUxWQSBBUVVJIENVQU5ETyBDT05PU0NBIENPTU8gU0UgQ09ORk9STUEgVU4gQklOXG5cbk1FSk9SIEFWRVJJR8OcRSBDVUFOVEFTIENMQVNFUyBERSBCSU5TIEVYSVNURU4gXG5ZIENPTU8gU0UgRVNUUlVDVFVSQU5cblxuJykNCglzeXMuZXhpdCgpDQoNCg0KIyMjIyMjQ0hFS0VBRE9SIERFIEJJTlMNCmRlZiBCaW5DaGVja2VyKCk6DQoJDQoJQmluID0gRkJpbls6Nl0NCg0KCXVybCA9ICJodHRwczovL3d3dy5sb29rdXBiaW4uY29tL2Jpbj9iaW49IiArIEJpbg0KIA0KCXJlc3BvbnNlID0gcmVxcy5nZXQodXJsKQ0KIA0KCWlmICJpcyBub3QgYSBrbm93biBCSU4iIGluIChyZXNwb25zZS50ZXh0KToNCgkJcHJpbnQgKCJcbiIsIEZCaW4sICJubyBlcyByZWNvbm9jaWRvIGNvbW8gdW4gQklOIikNCiANCgkJY2hlY2sgPSBzdHIoaW5wdXQoIlxuQURWRVJURU5DSUEgLi4uLiEuLkVsIEJJTiBxdWUgaW5ncmVzYXN0ZSBubyBlcyBhZGVjdWFkbyBvIGVzIGluY29ycmVjdG8gXG4gwr9EZXNlYSBjYW1iaWFyIGVsIEJJTiAoWSAvIE4gKSA6ICIpKQ0KCQlpZiBjaGVjayBpbiBbJ24nLCAnTicsICdObycsICdubycsICdOTyddOg0KCQkJcXVpdCgpDQoJCWVsc2U6DQoJCQlCaW5DaGVja2VyKCkNCgllbHNlOg0KCQlpZiAiQklOIiBpbiAocmVzcG9uc2UudGV4dCk6DQoJCQlCSU4gPSAoKHJlc3BvbnNlLnRleHQpLnNwbGl0KCJCSU46IiwyKVstMV0pLnNwbGl0KCI8L2Rpdj48L2Rpdj4iLCAxKVswXVsyODpdDQoNCgkJaWYgIk5ldHdvcmsiIGluIChyZXNwb25zZS50ZXh0KToNCgkJCU5ldHdvcmsgPSBzdHIoKHJlc3BvbnNlLnRleHQpLnNwbGl0KCJOZXR3b3JrOiIsMilbLTFdKS5zcGxpdCgiPC9kaXY+PC9kaXY+IiwgMSlbMF1bMjg6XQ0KCQkJcHJpbnQoIlwwMzNbMTszM21SRUQ6IFwwMzNbMTszMm0iLCBOZXR3b3JrKQ0KIA0KCQlpZiAiQnJhbmQiIGluIChyZXNwb25zZS50ZXh0KToNCgkJCUJyYW5kID0gc3RyKChyZXNwb25zZS50ZXh0KS5zcGxpdCgiQnJhbmQ6IiwyKVstMV0pLnNwbGl0KCI8L2Rpdj48L2Rpdj4iLCAxKVswXVsyODpdDQoJCQlwcmludCgiXDAzM1sxOzMzbU1BUkNBOiBcMDMzWzE7MzJtIiwgQnJhbmQpDQogDQoJCWlmICJUeXBlIiBpbiAocmVzcG9uc2UudGV4dCk6DQoJCQlUeXBlID0gc3RyKChyZXNwb25zZS50ZXh0KS5zcGxpdCgiVHlwZToiLDIpWy0xXSkuc3BsaXQoIjwvZGl2PjwvZGl2PiIsIDEpWzBdWzI4Ol0NCgkJCXByaW50KCJcMDMzWzE7MzNtVElQTzogXDAzM1sxOzMybSIsIFR5cGUpDQogDQoJCWlmICJQcmVwYWlkIiBpbiAocmVzcG9uc2UudGV4dCk6DQoJCQlQcmVwYWlkID0gKHJlc3BvbnNlLnRleHQpLnNwbGl0KCJQcmVwYWlkOiIsMilbLTFdLnNwbGl0KCI8L2Rpdj48L2Rpdj4iLCAxKVswXVsyODpdDQoJCQlwcmludCgiXDAzM1sxOzMzbVBSRVBBR086IFwwMzNbMTszMm0iLCBQcmVwYWlkKQ0KIA0KCQlpZiAnQ291bnRyeTonIGluIChyZXNwb25zZS50ZXh0KToNCgkJCUNvdW50cnkgPSBzdHIoKHJlc3BvbnNlLnRleHQpLnNwbGl0KCJDb3VudHJ5OiIsMilbLTFdKS5zcGxpdCgiPC9kaXY+PC9kaXY+IiwgMSlbMF1bMjg6XQ0KCQkJcHJpbnQoIlwwMzNbMTszM21QQUlTOiBcMDMzWzE7MzJtIiwgQ291bnRyeSkNCgkJaWYgIkJhbms6IiBpbiAocmVzcG9uc2UudGV4dCk6DQoJCQlCYW5rID0gKChyZXNwb25zZS50ZXh0KS5zcGxpdCgiQmFuazoiLDIpWy0xXSkuc3BsaXQoIjwvZGl2PjwvZGl2PiIsIDEpWzBdWzI4Ol0NCgkJCXByaW50KCJcMDMzWzE7MzNtQkFOQ086IFwwMzNbMTszMm0iLCBCYW5rKQ0KCXByaW50KHJvam8sc3BhY2UpDQoNCiMjIyMjI0VYVFJBUE9MQUNJT04gQkFTSUNBDQpkZWYgZ2VuYmFzaWNvKCk6DQogYmEgPSAoYmluMVswOjEwXSkNCiBiYTIgPSAoYmluMlswOjEwXSkNCiBnZW5iYSA9ICJ7MH17MX0iLiBmb3JtYXQoYmEsIHIpDQogZ2VuYmEyID0gInswfXsxfSIuIGZvcm1hdChiYTIsIHIpDQogcHJpbnQoIkVYVFJBUE9MQUNJT04gRVhJVE9TQSA6ICIsZ2VuYmEpDQogcHJpbnQoIkVYVFJBUE9MQUNJT04gRVhJVE9TQSA6ICIsZ2VuYmEyKQ0KIHJldHVybihieSkNCg0KIyMjIyNFWFRSQVBPTEFDSU9OIE1FRElBDQpkZWYgZ2VubWVkaW8oKToNCiBleCA9IChiaW4xWzA6N10pDQogZXgyID0gKGJpbjJbMDo3XSkNCiB0cmEgPSAoYmluMVs4OjEwXSkNCiB0cmEyID0gKGJpbjJbODoxMF0pDQogcG8gPSAoYmluMVsxMjoxNF0pDQogcG8yID0gKGJpbjJbMTI6MTRdKQ0KIGxhID0gKGJpbjFbMTU6XSkNCiBsYTIgPSAoYmluMlsxNTpdKQ0KDQogZ2VuID0gInthfXt5fXtifXt5fXt5fXtjfXt5fXtkfSIuZm9ybWF0KGE9KGV4KSwgeT14LCBiPSh0cmEpLCBjPShwbyksIGQ9KGxhKSkNCiBnZW4yID0gInthfXt5fXtifXt5fXt5fXtjfXt5fXtkfSIuZm9ybWF0KGE9KGV4MiksIHk9eCwgYj0odHJhMiksIGM9KHBvMiksIGQ9KGxhMikpDQogcHJpbnQoIkVYVFJBUE9MQUNJT04gRkFCVUxPU0EgOiAiLGdlbikNCiBwcmludCgiRVhUUkFQT0xBQ0lPTiBGQUJVTE9TQSA6ICIsZ2VuMikNCiByZXR1cm4oYnkpDQoNCg0KIyMjRVhUUkFQT0xBQ0lPTiBBVkFOWkFEQQ0KZGVmIGdlbmF2YW56YWRvKCk6DQogY29tcCA9IHN0cigiezB9ezF9Ii4gZm9ybWF0KGJpbjFbOV0sIGJpbjFbMTBdKSkNCiBjb21wMiA9IHN0cigiezB9ezF9Ii4gZm9ybWF0KGJpbjJbOV0sIGJpbjJbMTBdKSkNCiBzdW0xID0gKGludChjb21wWzBdKSArIGludChjb21wMlswXSkpDQogc3VtMiA9IChpbnQoY29tcFsxXSkgKyBpbnQoY29tcDJbMV0pKQ0KIHJlc3VsdDEgPSBzdHIoaW50KHN1bTEpIC8gaW50KCIyIikqIDUpDQogcmVzdWx0MiA9IHN0cihpbnQoc3VtMikgLyBpbnQoIjIiKSogNSkNCg0KIGFkZCA9IChzdHIoInswfXsxfSIuIGZvcm1hdChyZXN1bHQxWzBdLCByZXN1bHQxWzFdKSkpDQogYWRkMiA9IChzdHIoInswfXsxfSIuIGZvcm1hdChyZXN1bHQyWzBdLCByZXN1bHQyWzFdKSkpDQogZXh0cmFwb2xhZG8gPSAoaW50KGFkZCkgKyBpbnQoYWRkMikpDQoNCiBmaW5nZW4gPSAiezB9ezF9ezJ9ezN9ezR9Ii5mb3JtYXQoYmluMVswOjZdLCB4LCB4LCBleHRyYXBvbGFkbywgcikNCiBwcmludCgiRVhUUkFQT0xBQ0lPTiBTVVBFUiBWSVAgOiAiLGZpbmdlbikNCiByZXR1cm4oYnkpDQogDQpkZWYgYWN0dWFsaXphY2lvbigpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIHByaW50KGFtYXJpbGxvKQ0KICAgIG1zYSA9ICgiXG4gICBBQ1RVQUxJWkFORE/igKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKLigKJcbiIpDQogICAgZGVmIGNhcmdhdCgpOg0KICAgICAgICBmb3IgaSBpbiBtc2E6DQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGkpDQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4xKQ0KDQogICAgY2FyZ2F0KCkNCiAgICB0aW1lLnNsZWVwKDEpDQogICAgb3Muc3lzdGVtKCdybSAtcmYgL2RhdGEvZGF0YS9jb20udGVybXV4L2ZpbGVzL2hvbWUvQmluc0dlblJIJykNCiAgICBwcmludChhenVsLCdcbkFDVFVBTElaQURPIFNBVElTRkFDVE9SSUFNRU5URSAoXl9eKSAnKQ0KICAgIHByaW50KHJvam8pDQogICAgdGltZS5zbGVlcCgyKQ0KICAgIHByaW50KCcnJ1xuQUhPUkEgQ09QSUUgWSBQRUdVRSBFTCBTSUdVSUVOVEUgRU5MQUNFLCBFTiBVTkEgTlVFVkEgVkVOVEFOQToNCg0KICQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkDQogJCAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFsSGFja1JINTkzL0JpbnNHZW5SSCAgICQNCiAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCcnJykNCiAgICBzeXMuZXhpdCgpDQoNCiMjIyBBQ0NFUw0Kb3Muc3lzdGVtICgiY2xlYXIiKQ0Kb3Muc3lzdGVtICgiY293c2F5IC1mIGV5ZXMg4oCiTVVORE8gUmVhbEhhY2tSSF81OTPigKIgfCBsb2xjYXQiKQ0Kb3Muc3lzdGVtICgidG9pbGV0IC1mIGJpZyAnIFJlYWxIYWNrUkgnIC1GIGdheSB8IGxvbGNhdCIpDQpwcmludChhbWFyaWxsbykNCm5pYyA9IHN0cihpbnB1dCgnIFRVIE5JQ0sgQklORVJPIFBBUkEgRUwgTVVORE9DQVJESU5HIOKYhVJI4piFOiAgJykpDQpvcy5zeXN0ZW0gKCJjbGVhciIpDQp0aW1lLnNsZWVwKDAuNSkNCg0KcHJpbnQobW9yYWRvLCdSRVZJU0FORE8gTU9EVUxPUy4sLi4nKQ0KdGltZS5zbGVlcCgyKQ0KdHJ5Og0KIGltcG9ydCByZXF1ZXN0cw0KZXhjZXB0Og0KICBwcmludCgiIEluc3RhbGFuZG8gcmVxdWVzdHMgTW9kdWxlIikNCiAgaWYgb3MubmFtZT09J250JzoNCiAgICB0cnk6DQogICAgICBvcy5zeXN0ZW0oJ0M6XFB5dGhvbjI3XFNjcmlwdHNccGlwMi5leGUgaW5zdGFsbCByZXF1ZXN0cycpDQogICAgZXhjZXB0Og0KICAgICAgcHJpbnQoIkluc3RhbGwgUHl0aG9uLVBpcCBTaXIiKQ0KICAgICAgaW5wdXQoJycpDQogIGVsc2U6DQogICAgb3Muc3lzdGVtKCdwaXAyIGluc3RhbGwgcmVxdWVzdHMnKQ0KcHJpbnQoY2VsZXN0ZSwnUkVWSVNJT04gQ09NUExFVEFEQSAoXl9eKScpDQp0aW1lLnNsZWVwKDIpDQpvcy5zeXN0ZW0oJ2NsZWFyJykNCiMjIyMjI0J5OiBCb3NzDQp3aGlsZSBUcnVlOg0KICAgIG9zLnN5c3RlbSAoInRvaWxldCAtZiBiaWcgJ0JJTlNfR0VOX1JIJyAtRiBnYXkgfCBsb2xjYXQgIikNCiAgICBwcmludCgiXG5cblwwMzNbMzM7MW0gSE9MQSBcMDMzWzMxOzFt4oCg4piFIixuaWMsIuKYheKAoFwwMzNbMzM7MW0gQklFTlZFTklETyBBTCBNVU5ETyDimIZSRUFMS0lORyBSSOKYhlxuICDimIVTT01PUyBDQUxJREFEIFkgTk8gQ0FOVElEQUTimIUgUkVDVUVSREFOT1MiKQ0KICAgIHRpbWUuc2xlZXAoMikNCiAgICBwcmludCgnCSAgICAr4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCU4oCUKyAgICAgICAgXDAzM1szNTsxbSvigJTigJTigJTigJTigJQrXDAzM1szMzsxbScpDQogICAgcHJpbnQoJyAgICAgICAgICAgICAgICB8IE1VTkRPIEJJTlMg4piFUkjimIUgUFJPICB8ICAgICAgICAgICAgXDAzM1szNTsxbXxcMDMzWzMxOzFtViAyLjBcMDMzWzM1OzFtfFwwMzNbMzM7MW0nKQ0KICAgIHByaW50KCcJICAgICvigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQrICAgICAgICBcMDMzWzM1OzFtK+KAlOKAlOKAlOKAlOKAlCsnKQ0KICAgIHByaW50KGF6dWwpDQogICAgcHJpbnQoJyAgWyAxIF0gQlVTQ0FET1IgREUgQklOUyBNQVNURVJDQVJEJykNCiAgICBwcmludCgnICBbIDIgXSBCVVNDQURPUiBERSBCSU5TIFZJU0EnKQ0KICAgIHByaW50KCcgIFsgMyBdIEJVU0NBRE9SIERFIEJJTlMgQU1FWCcpDQogICAgcHJpbnQoJyAgWyA0IF0gQlVTQ0FET1IgREUgQklOUyBESVNDT1ZFUicpDQogICAgcHJpbnQoJyAgWyA1IF0gQ0hFS0VBRE9SIERFIEJJTlMnKQ0KICAgIHByaW50KCcgIFsgNiBdIEdFTkVSQURPUiBWSVAgREUgQklOUycpDQogICAgcHJpbnQoJyAgWyA3IF0gTVVMVEkgRVhUUkFQT0xBRE9SIERFIENDJykNCiAgICBwcmludCgnICBbIDggXSBBQ1RVQUxJWkFSIExBIFNDUklQVCBSSCcpDQogICAgcHJpbnQoJyAgWyA5IF0gU0FMSVIgREVMIFNDUklQVFxuJykNCg0KICAgIGJpID0gc3RyKGlucHV0KCcgXDAzM1swMTszM20lJSUlJSVcMDMzWzAxOzM0bSUlJSVcMDMzWzAxOzMxbSUlJSVcMDMzWzAxOzMybSBNVU5ETyBCSU5TIOKYhVJI4piFIFwwMzNbMDE7MzNtJSUlJSUlXDAzM1swMTszNG0lJSUlXDAzM1swMTszMW0lJSUlXDAzM1swMTszMm0gICMgXDAzM1swMTszN20nKSkNCg0KICAgIGlmIGJpID09ICcxJzoNCiAgICAgICAgb3Muc3lzdGVtICgiY2xlYXIiKQ0KICAgICAgICB0aW1lLnNsZWVwKDEpDQogICAgICAgIHN0b3AoKQ0KICAgICAgICB0aW1lLnNsZWVwKDEwKQ0KICAgICAgICBvcy5zeXN0ZW0gKCJjbGVhciIpDQogICAgICAgIHByaW50KHJvam8sc3BhY2UpDQogICAgICAgIHByaW50KGFtYXJpbGxvKydOVU1FUk8gREUgTEEgVEFSR0VUQSA6Jyx2ZXJkZSxtYXN0ZXJjKQ0KICAgICAgICBwcmludChhbWFyaWxsbysnQ1ZWIDonLHZlcmRlLGN2dikNCiAgICAgICAgcHJpbnQoYW1hcmlsbG8rJ0ZFQ0hBIDonLHZlcmRlLGRhdGExZ2VuKCksc3AsZGF0YTJnZW4oKSkNCiAgICAgICAgcHJpbnQoYW1hcmlsbG8rJ0NQRiBERSBMQSBUQVJHRVRBIDonLHZlcmRlLGNwZikNCiAgICAgICAgRkJpbiA9IG1hc3RlcmMNCiAgICAgICAgQmluQ2hlY2tlcigpDQogICAgICAgIHByaW50KGJ5KQ0KICAgICAgICBwcmludChtb3JhZG8rJ0FIT1JBIERFQkVTIFBST0JBUiBFTiBESVJFUkVOVEVTIFBBR0lOQVMgVFUgQ0MnICxtYXN0ZXJjLCdZIFNJUVVJRVJFUyBRVUUgVEUgRlVOQ0lPTkUgREVCRVMgRVhUUkFQT0xBUiwgQUxHVU5BUyBTT04gXG5NVUxUSUZVTkNJT05BTEVTIFkgUFVFUyBBTEdVTkFTIFBVRURFTiBKQUxBUiBFTiBDT01QUkFTLCBBTEdVTkFTIFxuUFVFREVOIEVTVEFSIFFVRU1BREFTIE8gTVVFUlRBUywgU09MTyBERUJFUyBQUk9CQVIgVU5BIFBPUiBVTkEgWSBcblRFTkVSIFBBQ0lFTkNJQSBcblNJIE5PIFRFIEZVTkNJT05BIENPTiBFU0UgUEFJUyBQVUVERVMgUFJPQkFSIENPTiBFU1RBRE9TIFVOSURPU1xuJykNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KDQogICAgZWxpZiBiaSA9PSAnMic6DQogICAgICAgIG9zLnN5c3RlbSAoImNsZWFyIikNCiAgICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgICBzdG9wKCkNCiAgICAgICAgdGltZS5zbGVlcCgxMCkNCiAgICAgICAgb3Muc3lzdGVtICgiY2xlYXIiKQ0KICAgICAgICBwcmludChyb2pvLHNwYWNlKQ0KICAgICAgICBwcmludChhbWFyaWxsbysnTlVNRVJPIERFIExBIFRBUkdFVEEgOicsdmVyZGUsdmlzYSkNCiAgICAgICAgcHJpbnQoYW1hcmlsbG8rJ0NWViA6Jyx2ZXJkZSxjdnYpDQogICAgICAgIHByaW50KGFtYXJpbGxvKydGRUNIQSA6Jyx2ZXJkZSxkYXRhMWdlbigpLHNwLGRhdGEyZ2VuKCkpDQogICAgICAgIHByaW50KGFtYXJpbGxvKydDUEYgREUgTEEgVEFSR0VUQSA6Jyx2ZXJkZSxjcGYpDQogICAgICAgIEZCaW4gPSB2aXNhDQogICAgICAgIEJpbkNoZWNrZXIoKQ0KICAgICAgICBwcmludChieSkNCiAgICAgICAgcHJpbnQobW9yYWRvKydBSE9SQSBERUJFUyBQUk9CQVIgRU4gRElSRVJFTlRFUyBQQUdJTkFTIFRVIENDJyAsdmlzYSwnWSBTSVFVSUVSRVMgUVVFIFRFIEZVTkNJT05FIERFQkVTIEVYVFJBUE9MQVIsIEFMR1VOQVMgU09OIFxuTVVMVElGVU5DSU9OQUxFUyBZIFBVRVMgQUxHVU5BUyBQVUVERU4gSkFMQVIgRU4gQ09NUFJBUywgQUxHVU5BUyBcblBVRURFTiBFU1RBUiBRVUVNQURBUyBPIE1VRVJUQVMsIFNPTE8gREVCRVMgUFJPQkFSIFVOQSBQT1IgVU5BIFkgXG5URU5FUiBQQUNJRU5DSUEgXG5TSSBOTyBURSBGVU5DSU9OQSBDT04gRVNFIFBBSVMgUFVFREVTIFBST0JBUiBDT04gRVNUQURPUyBVTklET1NcbicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCg0KICAgIGVsaWYgYmkgPT0gJzMnOg0KICAgICAgICBvcy5zeXN0ZW0gKCJjbGVhciIpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgc3RvcCgpDQogICAgICAgIHRpbWUuc2xlZXAoMTApDQogICAgICAgIG9zLnN5c3RlbSAoImNsZWFyIikNCiAgICAgICAgcHJpbnQocm9qbyxzcGFjZSkNCiAgICAgICAgcHJpbnQoYW1hcmlsbG8rJ05VTUVSTyBERSBMQSBUQVJHRVRBIDonLHZlcmRlLGFtZXgpDQogICAgICAgIHByaW50KGFtYXJpbGxvKydDVlYgOicsdmVyZGUsY2lkKQ0KICAgICAgICBwcmludChhbWFyaWxsbysnRkVDSEEgOicsdmVyZGUsZGF0YTFnZW4oKSxzcCxkYXRhMmdlbigpKQ0KICAgICAgICBwcmludChhbWFyaWxsbysnQ1BGIERFIExBIFRBUkdFVEEgOicsdmVyZGUsY3BmKQ0KICAgICAgICBGQmluID0gYW1leA0KICAgICAgICBCaW5DaGVja2VyKCkNCiAgICAgICAgcHJpbnQoYnkpDQogICAgICAgIHByaW50KG1vcmFkbysnQUhPUkEgREVCRVMgUFJPQkFSIEVOIERJUkVSRU5URVMgUEFHSU5BUyBUVSBDQycgLGFtZXgsJ1kgL25TSVFVSUVSRVMgUVVFIFRFIEZVTkNJT05FIERFQkVTIEVYVFJBUE9MQVIsIEFMR1VOQVMgU09OIFxuTVVMVElGVU5DSU9OQUxFUyBZIFBVRVMgQUxHVU5BUyBQVUVERU4gSkFMQVIgRU4gQ09NUFJBUywgQUxHVU5BUyBcblBVRURFTiBFU1RBUiBRVUVNQURBUyBPIE1VRVJUQVMsIFNPTE8gREVCRVMgUFJPQkFSIFVOQSBQT1IgVU5BIFkgXG5URU5FUiBQQUNJRU5DSUEgXG5TSSBOTyBURSBGVU5DSU9OQSBDT04gRVNFIFBBSVMgUFVFREVTIFBST0JBUiBDT04gRVNUQURPUyBVTklET1NcbicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCg0KICAgIGVsaWYgYmkgPT0gJzQnOg0KICAgICAgICBvcy5zeXN0ZW0gKCJjbGVhciIpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgc3RvcCgpDQogICAgICAgIHRpbWUuc2xlZXAoMTApDQogICAgICAgIG9zLnN5c3RlbSAoImNsZWFyIikNCiAgICAgICAgcHJpbnQocm9qbyxzcGFjZSkNCiAgICAgICAgcHJpbnQoYW1hcmlsbG8rJ05VTUVSTyBERSBMQSBUQVJHRVRBIDonLHZlcmRlLGRpc2MpDQogICAgICAgIHByaW50KGFtYXJpbGxvKydDVlYgOicsdmVyZGUsY3Z2KQ0KICAgICAgICBwcmludChhbWFyaWxsbysnRkVDSEEgOicsdmVyZGUsZGF0YTFnZW4oKSxzcCxkYXRhMmdlbigpKQ0KICAgICAgICBwcmludChhbWFyaWxsbysnQ1BGIERFIExBIFRBUkdFVEEgOicsdmVyZGUsY3BmKQ0KICAgICAgICBGQmluID0gZGlzYw0KICAgICAgICBCaW5DaGVja2VyKCkNCiAgICAgICAgcHJpbnQoYnkpDQogICAgICAgIHByaW50KG1vcmFkbysnQUhPUkEgREVCRVMgUFJPQkFSIEVOIERJUkVSRU5URVMgUEFHSU5BUyBUVSBDQycgLGRpc2MsJ1kgXG5TSVFVSUVSRVMgUVVFIFRFIEZVTkNJT05FIERFQkVTIEVYVFJBUE9MQVIsIEFMR1VOQVMgU09OIFxuTVVMVElGVU5DSU9OQUxFUyBZIFBVRVMgQUxHVU5BUyBQVUVERU4gSkFMQVIgRU4gQ09NUFJBUywgQUxHVU5BUyBcblBVRURFTiBFU1RBUiBRVUVNQURBUyBPIE1VRVJUQVMsIFNPTE8gREVCRVMgUFJPQkFSIFVOQSBQT1IgVU5BIFkgXG5URU5FUiBQQUNJRU5DSUEgXG5TSSBOTyBURSBGVU5DSU9OQSBDT04gRVNFIFBBSVMgUFVFREVTIFBST0JBUiBDT04gRVNUQURPUyBVTklET1NcbicpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCg0KICAgIGVsaWYgYmkgPT0gJzUnOg0KICAgICAgICBvcy5zeXN0ZW0gKCJjbGVhciIpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgcHJpbnQobW9yYWRvKQ0KICAgICAgICBvcy5zeXN0ZW0gKCJ0b2lsZXQgJ0xPT0tfQklOJyIpDQogICAgICAgIHByaW50KHJvam8sIuKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlCIpDQogICAgICAgIEZCaW4gPSBzdHIoaW5wdXQoIlxuXDAzM1sxOzMzbeKIhiBJTkdSRVNFIEVMIEJJTiBBIENIRUtFQVIgOiBcMDMzWzE7MzVtIikpDQogICAgICAgIEJpbkNoZWNrZXIoKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQoNCg0KICAgIGVsaWYgYmkgPT0gJzYnOg0KICAgICAgICBvcy5zeXN0ZW0gKCJjbGVhciIpDQogICAgICAgIHRpbWUuc2xlZXAoMSkNCiAgICAgICAgcHJpbnQocm9qbykNCiAgICAgICAgb3Muc3lzdGVtICgidG9pbGV0ICdCSU5TX0dFTiciKQ0KICAgICAgICBwcmludCh2ZXJkZSxzcGFjZSkNCiAgICAgICAgYmluX2Zvcm1hdCA9IHN0cihpbnB1dCgnRElHSVRFIEJJTiBERSAxNSBvIDE2IERJR0lUT1MgICM6ICcpKQ0KICAgICAgICBjYW4gPSBpbnQoaW5wdXQoIkNBTlRJREFEIEEgR0VORVJBUiAgIzogIikpDQogICAgICAgIHByaW50KHJvam8sIlxuXG58fCBDUkVESVQgQ0FSRCAgfHwgQ1ZWIHx8TUVTfHwgQcORTyB8fHwgQ0hFQ0tFUiB8fHwiKQ0KICAgICAgICBwcmludChhbWFyaWxsbykNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoY2FuKToNCiAgICAgICAgICAgIHRpbWUuc2xlZXAoMC41KQ0KICAgICAgICAgICAgYSA9IGJpbl9mb3JtYXRbOjZdDQogICAgICAgICAgICBiID0gcHJpbnQoY2NnZW4oYmluX2Zvcm1hdCksc3AsY2N2Z2VuKCksc3AsZGF0YTFnZW4oKSxzcCxkYXRhMmdlbigpLHNwLCI+IixjaGVja2VyKCkpIGlmIGEgPj0gJzM2OTk5OScgYW5kIGEgPD0nNjYwMDAwJyBlbHNlIChiaW5kZXRlY3RvcigpKQ0KICAgICAgICBwcmludChiKQ0KICAgICAgICBwcmludCh2ZXJkZSwgYnkpDQogICAgICAgIHByaW50KGNlbGVzdGUsICJcbiBTRSBHRU5FUk8gQ09OIEVYSVRPIFRVIEJJTiIgLGJpbl9mb3JtYXQsICIsXG5VU0EgTEFTIFFVRSBFU1RBTiAnTElWRScgIFBBUkEgTUFTIFBST0JBQklMSURBRCIpDQogICAgICAgIHByaW50KHZlcmRlLCBzcGFjZSkNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KDQogICAgZWxpZiBiaSA9PSAnNyc6DQogICAgICAgIG9zLnN5c3RlbSAoImNsZWFyIikNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBwcmludChhbWFyaWxsbykNCiAgICAgICAgb3Muc3lzdGVtICgidG9pbGV0ICcgQ0NfTElWRSciKQ0KICAgICAgICBwcmludChyb2pvLCLigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQiKQ0KICAgICAgICBwcmludChjZWxlc3RlKQ0KICAgICAgICBiaW4xID0gc3RyKGlucHV0KCJQT05HQSBTVSBQUklNRVJBIENDIDogIikpDQogICAgICAgIGJpbjIgPSBzdHIoaW5wdXQoIlBPTkdBIFNVIFNFR1VOREEgQ0MgOiAiKSkNCiAgICAgICAgcHJpbnQoYXp1bCxzcGFjZSkNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBwcmludChyb2pvLCAiICAgICAgICAgICAgICAgICAgIOKIhiBFWFRSQVBPTEFDSU9OIEJBU0lDQSDiiIYiLGFtYXJpbGxvKQ0KICAgICAgICBwcmludChnZW5iYXNpY28oKSkNCiAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBwcmludChyb2pvLCJcbiAgICAgICAgICAgICAgICAgICDiiIYgRVhUUkFQT0xBQ0lPTiBNRURJQSDiiIYiLGFtYXJpbGxvKQ0KICAgICAgICBwcmludChnZW5tZWRpbygpKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQogICAgICAgIHByaW50KHJvam8sIlxuICAgICAgICAgICAgICAgICAgIOKIhiBFWFRSQVBPTEFDSU9OIEFWQU5aQURBIOKIhiIsYW1hcmlsbG8pDQogICAgICAgIHByaW50KGdlbmF2YW56YWRvKCkpDQogICAgICAgIHByaW50KG1vcmFkbywiXG5FU1RBIEVYVFJBUE9MQUNJT04gQVZBTlpBREEgU0UgU0FDTyBERSBMQSBCQVNFIERFIERBVE9TIERFTCBCQU5DTyIpDQogICAgICAgIHByaW50KGF6dWwsIHNwYWNlKQ0KICAgICAgICBwcmludCh2ZXJkZSwiICAgICAgPiBFWFRSQVBPTEFDSU9OIENPTVBMRVRBREEuLi4uLlxuXG4iKQ0KICAgICAgICB0aW1lLnNsZWVwKDIpDQoNCiAgICBlbGlmIGJpPT0nOCc6DQogICAgICAgIGFjdHVhbGl6YWNpb24oKQ0KICAgIA0KICAgIGVsaWYgYmkgPT0gJzknOg0KICAgICAgICBvcy5zeXN0ZW0gKCJjbGVhciIpDQogICAgICAgIHByaW50KGFtYXJpbGxvKQ0KICAgICAgICBvcy5zeXN0ZW0gKCJ0b2lsZXQgJ1JIU29jaWV0eSciKQ0KICAgICAgICBwcmludChwbG9tbykNCiAgICAgICAgcHJpbnQoIlvigKJdREVTQVJST0xMQURPIFBPUiBcMDMzWzMyOzFtQFJFQUxIQUNLUkg1OTMgKFRlbGVncmFtKVwwMzNbMzA7MW0gXG5b4oCiXVBST0hJQklETyBMQSBWRU5UQSBERSBMQSBIRVJSQU1JRU5UQVxuW+KAol1VTkVURSBBOiBcMDMzWzMyOzFtQE11bmRvTmV0UkggKFRlbGVncmFtKVwwMzNbMzA7MW0gUEFSQSBNQVMhLlxuW+KAol1TSUVNUFJFIEFHUkFERUNFIFBPUiBMTyBRVUUgSEFDRU1PUy5cblvigKJdRUwgQ09OT0NJTUlFTlRPIE5PIFRJRU5FIEZJTlxuW+KAol1FU1RBIEhFUlJBTUlFTlRBIFRFIEFZVURBIEEgQ09OU0VHVUlSIFRBUkdFVEFTIERFIENSRURJVE9TIFkgR0VORVJBQ0lPTiBERSBCSU5TXG5b4oCiXUFZVURBTUUgQ09OIFVOQSBET05BQ0lPTiBBIE1JIENVRU5UQSBQQVlQQUwgOiBcMDMzWzE7MzJtcGF5cGFsLm1lL2Vkd2lueWRcblwwMzNbMTszMG1b4oCiXVNJRU1QUkUgQUdSQURFQ0UgUE9SIExPIFFVRSBIQUNFTU9TLlxuW+KAol1FTCBDT05PQ0lNSUVOVE8gRVMgR1JBVElTIFkgSEFDSSBRVUUgQ09NUEFSVEVMT1xuW+KAol1MQSBNRUpPUiBBUEsgREUgQ0FSRElORyBcbiIsdmVyZGUsIlvigKJdaHR0cHM6Ly9hcGtwdXJlLmNvbS91LzI4MjI0ODgvcG9zdC80NzI5NjYxIFxuICBb4oCiXWh0dHA6Ly93d3cuYXBwY3JlYXRvcjI0LmNvbS9hcHA3MjkxMzkgXG5cbiIscm9qbywiW+KAol1NSSBDQU5BTCBERSBZT1VUVUJFXG4iLG1vcmFkbywiaHR0cHM6Ly9tLnlvdXR1YmUuY29tL2NoYW5uZWwvVUNnUVFMbklFb2RraVpJWGI4aE5janFnIFwwMzNbMzA7MDFtXG5b4oCiXU5PUyBWRU1PUyIsbmljLCJBR1JBREVDRSBBIFJFQUxIQUNLUkggUE9SIExBIFNDUklQVCBHUkFUSVNcbiIpDQogICAgICAgIHN5cy5leGl0KCkNCiAgICAgICAgYnJlYWsNCg0KICAgIGVsc2U6DQogICAgICAgIG9zLnN5c3RlbSAoImNsZWFyIikNCiAgICAgICAgcHJpbnQocm9qbykNCiAgICAgICAgcHJpbnQoIk9QQ0lPTiBJTkNPUlJFQ1RBIFxuUE9SIEZBVk9SIERJSklUQSBERSBOVUVWTyBBTUlHQCIpDQogICAgICAgIHRpbWUuc2xlZXAoMikNCiAgICAgICAgb3Muc3lzdGVtICgiY2xlYXIiKQ=="""
eval(compile(base64.b64decode(Qgb3MNCmltcG9),'','exec'))